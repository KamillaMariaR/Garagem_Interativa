// server.js (VERS√ÉO MODIFICADA COM CONEX√ÉO AO BANCO DE DADOS)

// === IMPORTA√á√ïES ===
// Note que usamos 'require' pois seu projeto est√° configurado para CommonJS
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const mongoose = require('mongoose'); // <-- 1. Importamos o Mongoose
require('dotenv').config(); // Carrega vari√°veis do .env (MONGO_URI, etc)

const app = express();
const PORT = process.env.PORT || 3001;

// === MIDDLEWARE ===
app.use(cors());
app.use(express.json());

// === CONEX√ÉO COM O BANCO DE DADOS (MongoDB com Mongoose) ===
const connectDB = async () => {
    try {
        const mongoUri = process.env.MONGO_URI;
        if (!mongoUri) {
            console.error("ERRO FATAL: Vari√°vel de ambiente MONGO_URI n√£o definida!");
            process.exit(1); // Encerra a aplica√ß√£o se a URI n√£o estiver configurada
        }

        await mongoose.connect(mongoUri);

        console.log("üöÄ Conectado ao MongoDB Atlas via Mongoose!");

        // Opcional: Ouvir eventos de conex√£o para mais logs
        mongoose.connection.on('error', (err) => console.error("‚ùå Mongoose erro de conex√£o:", err));
        mongoose.connection.on('disconnected', () => console.warn("‚ö†Ô∏è Mongoose desconectado!"));

    } catch (err) {
        console.error("‚ùå ERRO FATAL: Falha ao conectar ao MongoDB:", err.message);
        process.exit(1); // Encerra se a conex√£o inicial falhar
    }
};

// === DEFINI√á√ÉO DOS MODELOS (Mongoose Schemas) ===
// Um Schema √© o "molde" de como os dados ser√£o guardados no banco.
const veiculoSchema = new mongoose.Schema({
    id: Number,
    modelo: String,
    ano: Number,
    destaque: String,
    imagemUrl: String
});

// O Model √© a ferramenta para interagir com a cole√ß√£o "veiculos" no banco.
const Veiculo = mongoose.model('Veiculo', veiculoSchema);

// --- DADOS MOCKADOS (Vamos manter alguns por enquanto, mas os ve√≠culos vir√£o do banco!) ---

// ESTES DADOS SER√ÉO IGNORADOS, POIS A ROTA AGORA BUSCA DO BANCO
/*
const veiculosDestaque = [
    { id: 1, modelo: "Honda Civic G10", ano: 2021, ... },
    ...
];
*/

const servicosOferecidos = [
    { nome: "Troca de √ìleo e Filtro", descricao: "Utilizamos √≥leos sint√©ticos e semi-sint√©ticos de alta qualidade.", precoEstimado: "R$ 250,00" },
    { nome: "Alinhamento e Balanceamento", descricao: "Equipamentos de √∫ltima gera√ß√£o para garantir a estabilidade do seu ve√≠culo.", precoEstimado: "R$ 150,00" },
    { nome: "Revis√£o de Freios", descricao: "Inspe√ß√£o completa de pastilhas, discos e fluido de freio.", precoEstimado: "R$ 300,00" },
    { nome: "Diagn√≥stico Eletr√¥nico", descricao: "Identifica√ß√£o de falhas com scanner automotivo especializado.", precoEstimado: "R$ 120,00" }
];

const viagensPopulares = [
    { id: 1, destino: "Serra Ga√∫cha", pais: "Brasil", descricao: "Estradas sinuosas...", imagemUrl: "imagens/serra-gaucha.jpg" },
    { id: 2, destino: "Rota 66", pais: "EUA", descricao: "A ic√¥nica 'Mother Road'...", imagemUrl: "imagens/rota-66.jpg" },
    { id: 3, destino: "Deserto do Atacama", pais: "Chile", descricao: "Uma aventura off-road...", imagemUrl: "imagens/atacama.jpg" }
];

const dicasManutencao = { /* ... seu objeto de dicas ... */ };


// === ROTAS DA API ===

// Rota de Teste
app.get('/api', (req, res) => {
    res.json({ message: "API da Garagem Interativa est√° funcionando e conectada ao DB!" });
});

// Rota para Ve√≠culos em Destaque (AGORA BUSCANDO DO BANCO DE DADOS!)
app.get('/api/garagem/veiculos-destaque', async (req, res) => {
    console.log('GET /api/garagem/veiculos-destaque - Recebido! Buscando no DB...');
    try {
        // Usa o Model 'Veiculo' para encontrar (.find()) todos os documentos na cole√ß√£o.
        const veiculosDoBanco = await Veiculo.find({});
        
        // Se n√£o encontrar nenhum, pode-se inserir os dados iniciais uma √∫nica vez
        if (veiculosDoBanco.length === 0) {
            console.log("Banco de ve√≠culos vazio. Inserindo dados iniciais...");
            const veiculosIniciais = [
                { id: 1, modelo: "Honda Civic G10", ano: 2021, destaque: "Confiabilidade e Economia", imagemUrl: "imagens/civic-removebg-preview.png" },
                { id: 2, modelo: "Pagani Huayra", ano: 2020, destaque: "Performance Extrema", imagemUrl: "imagens/paganiRosa-removebg-preview.png" },
                { id: 3, modelo: "Mercedes-Benz Actros", ano: 2022, destaque: "Robustez para Longas Dist√¢ncias", imagemUrl: "imagens/caminh√£o-removebg-preview.png" },
                { id: 4, modelo: "Kawasaki Ninja ZX-6R", ano: 2023, destaque: "Agilidade e Estilo Esportivo", imagemUrl: "imagens/kawasaki-Photoroom.png" }
            ];
            await Veiculo.insertMany(veiculosIniciais);
            console.log("Dados iniciais inseridos!");
            res.json(veiculosIniciais);
        } else {
            res.json(veiculosDoBanco);
        }

    } catch (error) {
        console.error("Erro ao buscar ve√≠culos no banco de dados:", error);
        res.status(500).json({ message: "Erro ao buscar dados dos ve√≠culos." });
    }
});

// Rota para Servi√ßos Oferecidos (continua usando dados mockados por enquanto)
app.get('/api/garagem/servicos-oferecidos', (req, res) => {
    console.log('GET /api/garagem/servicos-oferecidos - Recebido!');
    res.json(servicosOferecidos);
});

// ... (Suas outras rotas: /api/viagens-populares, /api/dicas-manutencao, /clima) ...
// Nenhuma altera√ß√£o necess√°ria nelas por agora.
app.get('/api/viagens-populares', (req, res) => {
    console.log('GET /api/viagens-populares - Recebido!');
    res.json(viagensPopulares);
});

app.get('/api/dicas-manutencao/:tipo?', (req, res) => { /* ... seu c√≥digo ... */ });

app.get('/clima', async (req, res) => { /* ... seu c√≥digo ... */ });


// === INICIALIZA√á√ÉO DO SERVIDOR ===
// Criamos uma fun√ß√£o para garantir que o servidor s√≥ inicie AP√ìS a conex√£o com o banco.
const startServer = async () => {
    await connectDB(); // Primeiro, tenta conectar ao banco.

    app.listen(PORT, () => {
        console.log(`‚úÖ Servidor da GARAGEM INTERATIVA rodando na porta ${PORT}`);
        console.log(`Acesse a API de teste em http://localhost:${PORT}/api`);
    });
};

// Chama a fun√ß√£o para iniciar todo o processo.
startServer();
